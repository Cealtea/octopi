{"name":"Octopi","tagline":"trie based suggestions microlibrary","body":"# octopi.js\r\n\r\n<img src='media/octopi.png' align='right'/>\r\n\r\nMicro (0.5kB) trie based suggestions microlibrary,\r\nmade with autocompletion, control, and low memory\r\nconsumption in mind.\r\n\r\n```js\r\nvar oct = Octopi(['bird', 'boy']);\r\noct.add('bid', {'word': 'BID'});\r\noct.get('bi');   // => ['bird', {'word':'BID'}]\r\noct.next('b')\r\n   .next('i')\r\n   .next('r')    // no need to check 'bir' again!\r\n   .words()      // => ['bird']\r\n```\r\n\r\n### Do you even normalise?\r\n\r\nOctopi allows for arbitrary data to be associated\r\nwith words added to the tree. This means that you\r\nhave full control over normalisation of the words.\r\nFor example:\r\n\r\n```js\r\nword = 'CoolUseRName';\r\noct.add(word.toLowerCase(), word);\r\noct.get(word.toLowerCase());\r\n```\r\n\r\n### Installation\r\n\r\n```sh\r\n$ bower install eugenee-eeo/octopi\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}